/*
* LED_test_microblaze.c
* Created on: 14 July 2019
* Author: Matt Saunders
*
* Adapted from LED_test.c by Ross Elliot, The Zynq Book Tutorials.
*/
/* Include Files */
#include "xparameters.h"
#include "xgpio.h"
#include "xstatus.h"
#include "xil_printf.h"
/* Definitions */
#define GPIO_DEVICE_ID XPAR_AXI_GPIO_0_DEVICE_ID /* GPIO device */
#define LED 0xC3C3 /* Initial LED value - XX0000XX_XX0000XX */
#define LED_DELAY 10000000 /* Software delay length */
#define LED_CHANNEL 1 /* GPIO port for LEDs */

#define AXIGPIO_SW_CHANNEL 2 /* GPIO port for LEDs */ // Adding port 2 of axi gpio 2 which connects to the switches

#define printf xil_printf /* smaller, optimised printf */

XGpio Gpio; /* GPIO Device driver instance */
int LEDOutputExample(void) {
    volatile int Delay;
    int Status;
    int led = LED; /* Hold current LED value. Initialise to LED definition */
    int newswitches;

    /* GPIO driver initialisation */
    Status = XGpio_Initialize(&Gpio, GPIO_DEVICE_ID);
    if (Status != XST_SUCCESS) {
           return XST_FAILURE;
    }
    
    /*Set the direction for the LEDs to output. */
    XGpio_SetDataDirection(&Gpio, LED_CHANNEL, 0x0000);

    /*Set the direction for the SWs to input. */	// (NEW)
	XGpio_SetDataDirection(&Gpio, AXIGPIO_SW_CHANNEL, 0xFFFF);

    /* Loop forever blinking the LED. */
    while (1) {

    	newswitches = XGpio_DiscreteRead(&Gpio, AXIGPIO_SW_CHANNEL); // This sets integer value to the value to the value that is read from the switch channel.
    	XGpio_DiscreteWrite(&Gpio, AXIGPIO_SW_CHANNEL, newswitches); // This reads that input

       /* Write output to the LEDs. */
    	XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, newswitches);	// Set the newswitches to be the recognizing inputs for the led channel for output according to switches instead of random pattern
       
//       /* Flip LEDs. */
//       led = ~led;
//
//       /* Wait a small amount of time so the LED blinking is visible. */
//       for (Delay = 0; Delay < LED_DELAY; Delay++);
    }
    return XST_SUCCESS; /* Should be unreachable */
}

int main(void) {
    int Status;
    
    /* Execute the LED output. */
    Status = LEDOutputExample();
    if (Status != XST_SUCCESS) {
       xil_printf("GPIO output to the LEDs failed!\r\n");
    }
    return 0;
}
